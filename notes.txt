Goal: Generic ObjectOriented Game Enigne

Edge cases:
    pawn, en passant
    castling
    
Other weird things: 
    pawn-promotion
    king must move out of check
    king cannot move into check
    other peices can't move in a way that puts king in check

figure out inheritance of a king(piece)

1/17

store board position with 1=white vs 2=black

two_by_ones()

try filtering pieces by b_white property

get_available_moves()
    eliminate own piece blocks
    allow opponent piece capture

1/18

x  spaces = X is not implemented -> king is not implemented
   pawn move is not implemented
    upacross(spaces = 2, only_up = True)

   filter_blocking can give all the available from all possible
x  filter_by_blocking()

1/19


finish implementing all piece movements

make a turn-engine
    x make random moves
    x allow input to control a player

king and enpassant-vulnerable-pawn are needed as enums on board

Long-Term:
    calculate all get_diags get_across etc for each position into a lookup table
    can cache available moves to each piece and use in next turn


why does the debug break in VScode on print IOError?
    > print rook_moves
    > IOError: [Errno 2] No such file or directory
    everyone since Fall Creator updates has this:
        https://github.com/Microsoft/vscode/issues/36630

board should store edge cases:
     king_can_castle, rook_can_castle, en_passant_vulnerable [0,1,,0,0]...

    -> so that, piece.get_available_moves(board) is full evaulation
       not: piece.get_available_moves(board, white's pawns, etc...)

1/22

    todo:
        en passant
        castling
        player move cant put his king in check
        
        promotion
        available_moves when player in check
        >hint should display moves helpfully

1/23

    need to clear en passant
    write tests for enpassant in main
    castling
    pretty-print available moves

1/26

    tests for castling
    clear_castling
    bug for calling a castle ambiguous with king step left
    bug for both castles being available when one is False, the "any()" line is culprit?
    tests for clear castling
    test for main() by loading moves
    tests for castling

1/27

    x modfiy_castle()
    x test this out
    add tests to main 
        add instructions in Select A Move section
        add 

    Takeaways: data_struct[player] vs data_struct[1-int(player)]
    is a very easy mistake to make and shows why you need getter'instead
    of modifying the property "by hand".


1/28

    as i realized, checkmate detector is not difficult, it is only:
        -available_moves [where king not in check] = {} ("empty set")
        -check_flag = True
    -> so the real heart of the game is calc'ing is_king_in_check

    modular idea: what if board.data was a numpy array? smaller mem and faster?

    #NOTE - how to get out of check? all moves filtered by king_in_check
            #   but how to handle killing the checking piece?

    TODO:
        refactor data_by_player
    x    add named_tuple for move
        make player 0,1 not true,False
        make board the first argument in TurnStage functions

1/29

    TODO:
        add to Game() init_board, init_player 
           to allow testing specific situations

        add exit code for available moves
        add exit code for total number of moves to allow random play

        build tests for king in check in specific situations

        add perf_test.py to time play()

            add a bool to game to turn on/off filter_king_check()
            check the difference in time

            add perf_test_log to GameLog to collect granular timing
               data and additional info at each step

        build analyze_perf_test to analyze num_moves vs time_compute, etc.

    Ahh so optimal is O(n) * c where c is in [1,4]

    there are multiple optimizations:
        
        instead of copying the board, just set different positions,
        and then set them back as you exit function. (or is that even needed?) 
            (this could be wrong for en passant situations, 
                so dont run this optimize if this is so )

        how about "piping" moves from get_available -> filter_check
            this involves async in py3?

        using numpy instead of list of list
        using a 64char string instead of a list

        using superking instead of all opponent's pieces

        pre-computation+lookup for piece.get_moves() instead of on-the-spot calc

    so the initial abstraction of piece kills opponents piece regardless of rank
    breaks down here, as the king is special. we already knew that with check_flag 
    but that is poor because a. it's arduous to compute move_yourself_into_check 
    in O(n^2) and b. it doesnt capture the idea of moving so as to place opponent 
    in check.

    Ah, but none of the atomic-moves overlap thus the move_type and move can be parsed
    after exiting blocking_piece() at the bottom of get_available()

    Playful aside: like in poker with 'Hand' as a concept, 'check' is an ambiguous
    and overused concept in chess.

    TODO

        add board.get_pos_value(pos) and refactor
        add put_in_check also using mirror
        write non encapsulated
        apply yield in select spots
        create a modularized perf_test
        add more insturctions to see larger n
        build a n_available_moves log into GameLog and record during perf_test
        how to do reflective class.getattr()
            -> if so get to class_move_types in one calc?
            should be named piece_movetypes_spaces

    1/31

        investigate pieces.pop() issue?
        

    a better name for super-king is mirror-piece: "if it can kill you, you can kill it"
    or an anti-king: "can attack only when in check"
        this is like a queen plus a horse but can't kill pawns head-on
        and cant kill king except directly adjacent
        but it doesn't neccesarily move unless attacking.
        ahh but what if oppoent piece cant kill it because doing so would put 
        himself in check? can the mirror-piece still attack opponent, except with king
        where he cant kill it because that would put him in check
        

    2/8

    TODO

        x PoC with turn_times in perf_test
        x basic check_optimal implementation
        copy.deepcopy on get_log_X() as they are list of lists
        x perf_test of using bypass mirror calc in possible_check_optimal() 
        tests to figure out if optimal works for all cases naive does
        does check_optimal work with pawns? prolly not right now

        think about how to mutate board instead of apply_rule
            do you need pos0? or pos1?
            do you need to account for kill_piece popping? - (yes)
            and how does this change in check_opponent vs 
                dont_move_self_into_check

            so i think you need pos0 only on dont_move_self_into_check,
                (for everything execpt castling, and king moves)
                but you need pos1 only on opponent_check. True?

            so essentially if MOVE_CODE == 'regular' then do mirror, 
            otherwise do naive could work

        how do you isolate get_available_moves() time from full turn loop?

        Try @classmethod
        https://julien.danjou.info/blog/2013/guide-python-static-class-abstract-methods

    2/9

        x Print out turn_time
        try to remove copy(board) from inner loop
        do a plt
        do a regression
        first we need more game-data, need a save function from manual mode
        need a way to return game state data in  board, like in-check to tests

        BUGS
            x moving R or K after castling does not work
            x filter_copy_apply_4 is fast but doesnt pass 3 test

    2/12

        BUGS
            x can't use raw_input in git-bash or in vscode-python-debug (just hangs)
            fixed by loading root dir of exercises and picking up integrated shell settings?
            this way, python debug stdout loads in 'Terminal' tab under 'python debug' mode,
            otherwise it loads in 'Debug Console'

                Fixes:
                    GitBash: prepend with 'winpty'
                        >winpty python file.py
                        >python -i

                    VSCode: In Debug section, get a launch.json settings
                        chose 'Python Terminal (integrated)' or
                        'Python Terminal (external).

        TODO:
            x add in player-in-check
            use piece.alive=False in naive-check-filter
            need to use a fork for filter_king_in_check when opponents pieces < 4 (?)
            x pass the pytest's that are broken 
                (? they arent croken currently,turn of c_apply_4 by default ?)
            Better prettyprint for 'hint'
            x more tests for check
            Find way to view size of memory of the python program

            there is still not alive=False function in mutate_pieces
                -> does this create errors?
                It seems once the enum is no longer on the board, it won't
                get picked up by mirror-king, so it should work except enpassant
                which has already been ruled out.

        Questions:
            Does get_possible_check_optimal take into account pawns?
                I think so because (movetype.diagonal, 1) in in Mirror.class_movements()
                    but how does this handle direction?

            How does modify castling propert work for rooks?

    2/15

        TODO
            record game outcome
            checkmate bug
                bring in board/pieces from an exit
            build a unified Board+Pieces Data Structure

            Build up a way to log when the check_cache is in use, use that
            to compare perf in before vs. after:

                e.g. 20% of the time the turn can use the cache, and in this time
                it cuts down on average 75% of the turn time. Therefore average
                per turn processing is lowered by 15%

    2/16

        TODO
            PGN() class
            alphanum_instructions <- str(log.get_log_move())  play() <- pgn_instructions


    2/26

        TODO

            tests for perf_test.py 
            promotion functionalities + tests
            add promotion to log_move / parse_move
            test for profile_test.py
            remove test:basic or repair it


    3/16

        TODO

            promotion in TurnStage
                dy default it creates a queen, but you override to set a piece you want

            i think b_pawn in mirror functions is still not handled appropriately

            first add a test for succesful promotion under advance and capture

    3/19

        Notes

            To copy/paste in git/mingw:
                Copy: Shift + PgDn  (note: need to turn off 'fn')
                Paste: Shift + Ins  (note: need to turn off 'fn')

            How to mark, though?
        
        Questions

            x is move_type=promotion marker ahead of filter_king_in_check() ?
            x if so how do we filter it out?
            x Yes, it's ok: filter_by_blocking_move handles this

        Takeaways

            based on previous bug with castling, where king castled with an already
            captured rook, the promotion test finds multiple ways to probe the state
            and see if everything checks out.

        TODO

            Main need: handle pawns in king_in_check properly, build tests for that


    3/23

        TODO

            Fix pawn bug in king_in_check

            Setup tests to find any other ways that king_in_check_optimal is different
            from naive version

            Fix letter-numbers to conform to pgn: 
                in printout display and in interactive instructions

        In the Future:

            Start testing end-game return codes
            Start testing more pgn's 

    3/26

        TODOs
            x basecamp
            x test with pawns threatening king
            x how to run tests with/without castling
            x test with castling
                x eg castling into check by pawn
            x cleanup main and move seperate function calls to misc-script.py
            
            x start testing end-game conditions
            
            x need to test in_check more, not just filter_check
            
            also think about ways [standard] checkmate is ever different than
            len(filter_check(moves)) == 0?

            need to account for #1-0 comment in pgn

            need to test stalemate vs checkmate more

        Takeaways 

            Use a positive control when testing for negative results:
                e.g. when testing that you can't castle for test and verify
                that you can castle in other conditions and that you're verifying
                that is happening as seen in test_cant_castle_into_check_1()

    3/27
        
        TODOs
            
            refactor play() and kwargs names
                naive_check_filter
                dummy_deepcopy_filter
                opt_mutate_naive_check
                naive_mutate_opt_check
                opt_check_filter

        Grand Projets

            Analyze the perf-tradeoff of mirror vs naive in late game "low piece" situations
                to do this, you need to run a batch of games
                can look at a random-play game vs expert game

            Build the "cache" of opp_kill_moves
                analyze the perf-boost (or loss) as probability and a net

            Add numpy / str as board data Structure

            Add a combined piece+board data structure

            Score each move based on extensibly-definable-characteristics

            Build a pondering tree

            Analyze the size of each node
                can these be compressed?

    3/28

        x Get Kasparov games to run in batch:
            x fix pgn_instruct pop() bug
            x make sure the last move is included in pgn_instructs
            x when exiting play() before an endgame occurs, note the final player to have moved, its likely he won b/c the other guy resigned
            x finally, write and pass the batch_play test

        x Fix Game on Line 10 bug

        Add some unit tests for parse_pgn

        Would be nice to not return data calling play as function
        but from the game object itself.

        Fix A-G 1-8
            
        Nice to have a 0-7, 0-7 display as an option for debugging
        
        Then fix the A1 insturctions to 1A insturctions

        How to port tests to new style? an extra arg of b_legacy?

        Why don't my conditional break points work!!?
            but sometimes do?

        We can add "check indicator" to pgn_parse and verify our check that way

        Utlimately need a new dataset which plays the games thru mate for
        better testing

        RANDOM:
            can you solve hinomaru with soduku like data structure?
                
                this creates an almost closed-form / 'one-fell-swoop' /
                strict-computational-upper-bound form of search,
                compared to a randomly selecting, and pruning a tree.

                This has to do with "spacial-constraints"-space introduced by 
                soduku where rows,cols,9-squares form [exclusion] relationships between
                various squares, and thus means iterating across them less times.


        
    3/29

        x iron out errors found in batch_run

        need to import results from meta-data in GarryKasparov

        need to add check - '+' - in pgn's into data available for testing
        
        Really need to cleanup the git folder
            make sure to get your .vscode folder too

        Ultimately, refactoring will come with a little better test coverage,
        cleaner git, cleaner repo, and more structured repo, and maybe some unit tests.

            Also well want to know how to use git to rename files

            Well rename the functions and kwargs for algo

            As we move into pondering, well need to restructre some helper classes
            like Mirror.

        Another optimization is to break out of move-set when the
        first move in that move-set is invalid. E.g. moving the knight
        somewhere puts your king in check then moving him anywhere puts you incheck.
        
        
        Takeaways
            A lot of these recent bugs could have been fixed with unit-testing
            e.g. 
                pgn_parse disambig isdigit
                pgn_parse queen side castling carries wrong move data structure
                king_check_optimal doesnt shield
            I'm saved by having a wealth of already-QA'd example cases to test against
            but this won't always be the case.

    3/30

        TODOs
        10-11:30 do some misc bugs

            A1 -> 1A
                rebench tests?
                add a pos type annotations; 0-7 on rows and cols

            meta-data in .pgn

            check '+' from pgn

            fix global find in vscode
            
            final cleanup:
            Move Incompatibility | line_i:  1456
            game.i_turn:  15
            On PGN turn:  8  Player:  White
            Move Incompatibility | line_i:  1457
            game.i_turn:  2
            On PGN turn:  1  Player:  Black
            Move Incompatibility | line_i:  1458
            game.i_turn:  19
            On PGN turn:  10  Player:  White

        Grand Projects

            BatchTests module (separate file):
                 - verify move permissibility
                (this only verifies were not overly liberal
                but we still might be too conservative)
                 - verify check by turn
                 - verify checkmate
                 - verfiy stalemate
                
                need to find more data-sources, esp. for checkmate

            Computational Cost of various move-scoring routines
                e.g. to know if your move puts opponent in check
                you need to perform calc and this make them 10% more
                expensive than the baseline

            Need to sample existing games to do stats on computation-time
            in "real game" scenarios.

            Are doublet_instructions faster to run than pgn_instructions?



        HOWTOs

            to view the board while debugging:
                do into play() on stack
                create a Display class: 
                >display = Display()
                invoke function:
                >display.print_board_letters(pieces)

            
            use git stashing/branching for this repair:

                stash changes (made on master)
                >git stash save
                >git stash list
                stash@{0}: WIP on master: 39adbe1 notes basecamp for bug fixing stashes and commits
                
                build a new branch 'fix-test-and-engine-bug'
                git checkout -b fix-test-and-engine-bug

                switch to branch
                (already done)

                verify all tests are (incorrectly) passing
                (yes)
                
                pop stash changes to get fix for test bug
                >git stash apply

                also copy stash changes in notes to notes in branch
                (manually)

                manually apply fix into indv test cases
                adding game.reset_test() into tests

                run tests to reveal which tests break
                >pytest -vv main.py

                break these tests into a separate file
                >failing-tests.py

                verify you can run just those tests with test-runner
                >pytest -vv failing-tests.py

                make a commit here to identify which tests were incorrect
                >git add main.py failing-tests.py notes.txt
                >git commit -m '[message]'
                >git push origin fix-test-and-engine-bug

                now go into engine and fix bug
                (done)

                verify all tests pass after fix: both ones that were broken
                and ones working before - "that you didnt cause a regression"

                remove separate test file
                >rm failing-tests.py
                >git rm -r failing-tests.py

                commit this into branch
                >git push origin fix-test-and-engine-bug

                merge branch into master:
                on github, do merge pull request through UI
                now, on git client
                >git checkout master
                >git status  (seems like youre good but youre not)
                >git pull origin master
                (now youre good)

            
            How to split up a git repo:

                https://help.github.com/articles/splitting-a-subfolder-out-into-a-new-repository/

                clone repo locally into a temp
                run git prune
                git init remotely
                change local's remote to new init'd repo
                push the change to new remote(with -u)
                now locally, clone that new remote repo into a fresh local dir


            Also helpful, git cheatsheet
            https://gist.github.com/hofmannsven/6814451

                git mv filename newfilname
                git mv folder1 folder2
                (all file system cp / del is included)

                rm -f .git/index.lock   (when you can't add anything)
                


        Takeaways

            There is the notion of move or turn characteristics / features.
            Here we build an engine which minimizes computation time, and thus
            construct the bare number of features available, 

            THIS WAS ALL BAD SPECULATION DOWN A RABBIT HOLE

                e.g. not checking for check at the end/beginning of the turn.

                There might be some weird/theoretical cases where castling is a 
                valid escape sowe can identify those individually and test for 
                them in a sub-module?

                The unintuitive notion this exercises exposes is "Don't move a piece such
                that it puts yourself in check" is a rather estoric rule, but it is the only
                rule neccessary for computing: legal_moves, and end_game.
                This is because people don't build a list of all possible legal spaces each
                turn, instead they focus on five or six, and thus the verbal "check" helps
                them refocus their search.
                This also suggests that an AI would do well to limit its considerations
                to ~5 moves each turn, not every legally permissible one.

            Actually there is a good optimization to do here:
                If the king has len(opp_kill_moves) == 0 at the beggining of turn, 
                when you check is_king_in_check() then don't bother doing a mirror
                except with the move is associated with king.
                -> TODO: get a bunch or real life games and see when this comes 
                        into effect

                NOPE - this is all wrong speculation again; mirror_flag uses board
                pos to assess blocking pieces. 
                
                Still, there seems something to notion that opponents pieces
                don't move during your turn, thus some kind shortcut?

                    Maybe 'bypass' the first piece of yours in filter_blocking()
                    and cache that pos as in list_calc_needed when another piece
                    is validated as a threat. Then only run 
                    mirror on a move where pos0 is in list_calc_needed. A "moving
                    away a blocker" type move; implied is you can never add to possibility
                    of being in check based on where you end up.

                To consider: enpassant is the one move where pos1 != kill_pos, and that
                             oppoent pawn could be blocking check, with no piece there
                             to replace it.
                

                        
        
    Takeaway 1/30

        check out Mirror class for a pattern for building up a list of 
        increasingly large and informative tuples. But could this be accomplished
        in the other direction for each move, go through all the steps...?

        can't you just build list<-map() for each step      

        overall, a pretty good way to build 'a mirror image piece in OO chess engine'
        but YMMV. why:

            - encapsulation of functions, even staticmoves dont crowd into other modules

            - it represents one esoteric, isolated, confusing concept - that these 
            three pieces of information - move_type, move_paces, piece_class - can
            allow you to deduce if king is in check (or any piece in general is threatend)
            and this doesnt get applied or depended on anywhere else.            

            - it allows you to build up a naming motif in a completely enclosed scope

            - it allows you to build up a processing motif e.g 
              self.var2 = [func(x) for x in self.var]

            - shows you clearly what are inputs and outputs to this processing, and if
              any special order is needed

            - modularizes comments to its atomic concern: you can't about Hypothetical
              code changes that might affect this instruction while proc procedurally




    

    Idea for perf analysis:

    BUT: the below doesnt work becaused it has to occur for each-piece-move tuple
        same as iterating of opponent's possible moves. Instead we need a 
        list of positions on the board that help keep king out of check for non-king moves
        these dont include horse moves because horse is never blocked.
        Only when one of these pieces is proposed moved could the king be threatened.
        Note: this only occurs when a piece MOVES AWAY, not where it moves TO.
        This set of own-players pieces, calcd before each turn, is what hypo-king
        helps us calculate.

    it will be a lot faster to model is_king_in_check 
    without iterating across all opponents pieces possible moves 
    which runs in  O(piece-moves^2) or O(piece-moves * 2) (?)
    instead create a King-Hypothetical class which has all other pieces'
    moves and see if it "can kill" an opponents piece of the class that
    has the move type, which should be on the order of O(piece-move) 
    little higher than Queen's O(piece-move).
    You might also be able to cache the result, and only recalculate
    if a certain piece "assuring" it remains in position is moved.

    you can test the bigO-time by changing BOARD_WIDTH = 9,10,11,...
    you can test practical perf by taking random moves, or importing
    saved chess games and running total time it takes to calc all
    get_available_moves() using each method

    1/27 Thoughts:
        - it is O(n^2) if you think of piece-moves, and the most naive algo
         - to make the board wider, you need to handle castling better with board_width param

Takeaways:

    1/27
    software engineering and team-code practices become important at the point where
    one nice abstraction no longer encapsulates the whole requirements: in this case
    that occurs when enpassant and castling are added in. This requires enums and if/then
    logic processing

    Also, its true that available_moves, followed by end-game-conditions-check
    is the how to write these engines.

    instantiating the pieces is costly at each branch

    the correct level of abstraction for the Board is 
        piece vs. blank, 
        white-piece vs black-piece
        special-piece vs generic-piece. specials:
            king
            en-passant-vulnerable-pawn 
        ...nothing else needs to be considered at game-logic level, only
           further up at the stratgey-level.

    

    A board-move class holds dimensions of the board, the coloring and orietation, and
    the rules for the initial piece setup.
    Also, it holds the mathematical logic of the atomic moves:
        upacross [distance modifier] [w/wo player-direction-orientation e.g what is "move up"]
        diagonal [distance modifier] [w/wo player-direction-orientation]
        two_by_one
        

    The pieces then hold the business rules for which atomic move types they can perform and
    at what modification they can perform them, plus GameLedger modifications

        in addition to the Board is a Game-Ledger which tracks
            [king_can_castle | rook_can_castle]
            king_in_check
            turn_counter_while_solitary_king
            last_two_moves_tracker (for a 3-move-repeat-stalemate)
            pawn_advance_two can be held in the piece object

    Most rules are packed into available_moves routine
    
    Available_Moves_Player_P <- func(Board,Pieces,GameLedger)
        Available_Moves_i <- func(Piece_i,Board_current)
            <- filtered(king in check) Func(Board, Pieces)
               if GameLedger.check_flag
                    <- filtered(move-removes-check_flag)

    Then the strategy-module needs to consider the following info-blobs:
        Game board with pieces
        GameLedger
        Player_turn_current
        [turn_counter ?]
        ... everything else is derivative?
        
random thought: a mechanichal chess board is valuable to new variants of the rules that need
                inter-turn reshuffling of the pieces of display of available moves

        


